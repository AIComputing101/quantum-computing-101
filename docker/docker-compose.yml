version: '3.8'version: '3.8'



# Quantum Computing 101 - Docker Compose Configurationservices:

# Supports CPU, NVIDIA GPU, and AMD GPU variants  # CPU-only variant for lightweight usage and learning

  quantum101-cpu:

services:    build:

  # =============================================================================      context: ..

  # CPU-Only Service      dockerfile: docker/Dockerfile.cpu

  # =============================================================================    image: quantum101:cpu

  qc101-cpu:    container_name: qc101-cpu

    build:    volumes:

      context: ..      - ../examples:/home/qc101/quantum-computing-101/examples

      dockerfile: docker/Dockerfile      - ../outputs:/home/qc101/quantum-computing-101/outputs

      args:      - ../modules:/home/qc101/quantum-computing-101/modules:ro

        VARIANT: cpu    working_dir: /home/qc101/quantum-computing-101/examples

      target: runtime    environment:

    image: quantum-computing-101:cpu      - PYTHONPATH=/home/qc101/quantum-computing-101

    container_name: qc101-cpu      - MPLBACKEND=Agg

    hostname: qc101-cpu      - QC101_VARIANT=cpu

    environment:    networks:

      - QC101_VARIANT=cpu      - quantum-net

    volumes:    restart: unless-stopped

      - ../examples:/home/qc101/quantum-computing-101/examples    # CPU resource limits for fair sharing

      - ../outputs:/home/qc101/quantum-computing-101/outputs    deploy:

      - qc101-cache:/home/qc101/.cache      resources:

    ports:        limits:

      - "8888:8888"  # Jupyter Lab          cpus: '4.0'

      - "6006:6006"  # TensorBoard          memory: 4G

    networks:        reservations:

      - qc101-network          memory: 1G

    restart: unless-stopped

    stdin_open: true  # NVIDIA CUDA GPU variant for maximum acceleration

    tty: true  quantum101-gpu-nvidia:

    build:

  # =============================================================================      context: ..

  # NVIDIA GPU Service      dockerfile: docker/Dockerfile.gpu-nvidia

  # =============================================================================    image: quantum101:gpu-nvidia

  qc101-nvidia:    container_name: qc101-gpu-nvidia

    build:    volumes:

      context: ..      - ../examples:/home/qc101/quantum-computing-101/examples

      dockerfile: docker/Dockerfile      - ../outputs:/home/qc101/quantum-computing-101/outputs

      args:      - ../modules:/home/qc101/quantum-computing-101/modules:ro

        VARIANT: nvidia    working_dir: /home/qc101/quantum-computing-101/examples

        PYTORCH_VERSION: "2.8.0"    environment:

        CUDA_VERSION: "12.9"      - PYTHONPATH=/home/qc101/quantum-computing-101

        CUDNN_VERSION: "9"      - MPLBACKEND=Agg

      target: runtime      - QC101_VARIANT=gpu-nvidia

    image: quantum-computing-101:nvidia-gpu      - NVIDIA_VISIBLE_DEVICES=all

    container_name: qc101-nvidia      - CUDA_VISIBLE_DEVICES=all

    hostname: qc101-nvidia    networks:

    environment:      - quantum-net

      - QC101_VARIANT=gpu-nvidia    restart: unless-stopped

      - NVIDIA_VISIBLE_DEVICES=all    # NVIDIA GPU resource configuration

      - NVIDIA_DRIVER_CAPABILITIES=compute,utility    deploy:

    volumes:      resources:

      - ../examples:/home/qc101/quantum-computing-101/examples        reservations:

      - ../outputs:/home/qc101/quantum-computing-101/outputs          devices:

      - qc101-cache-nvidia:/home/qc101/.cache            - driver: nvidia

      - /tmp/.X11-unix:/tmp/.X11-unix:rw              count: all

    ports:              capabilities: [gpu]

      - "8889:8888"  # Jupyter Lab (different port to avoid conflict)        limits:

      - "6007:6006"  # TensorBoard          memory: 8G

    networks:    runtime: nvidia

      - qc101-network

    deploy:  # AMD ROCm GPU variant for AMD GPU acceleration

      resources:  quantum101-gpu-amd:

        reservations:    build:

          devices:      context: ..

            - driver: nvidia      dockerfile: docker/Dockerfile.gpu-amd

              count: all    image: quantum101:gpu-amd

              capabilities: [gpu]    container_name: qc101-gpu-amd

    restart: unless-stopped    volumes:

    stdin_open: true      - ../examples:/home/qc101/quantum-computing-101/examples

    tty: true      - ../outputs:/home/qc101/quantum-computing-101/outputs

      - ../modules:/home/qc101/quantum-computing-101/modules:ro

  # =============================================================================    working_dir: /home/qc101/quantum-computing-101/examples

  # AMD GPU Service (ROCm)    environment:

  # =============================================================================      - PYTHONPATH=/home/qc101/quantum-computing-101

  qc101-amd:      - MPLBACKEND=Agg

    build:      - QC101_VARIANT=gpu-amd

      context: ..      - ROCm_HOME=/opt/rocm

      dockerfile: docker/Dockerfile      - HIP_VISIBLE_DEVICES=all

      args:    networks:

        VARIANT: amd      - quantum-net

      target: runtime    restart: unless-stopped

    image: quantum-computing-101:amd-gpu    devices:

    container_name: qc101-amd      - /dev/kfd:/dev/kfd

    hostname: qc101-amd      - /dev/dri:/dev/dri

    environment:    group_add:

      - QC101_VARIANT=gpu-amd      - video

      - ROCM_VISIBLE_DEVICES=all    deploy:

      - HIP_VISIBLE_DEVICES=all      resources:

    volumes:        limits:

      - ../examples:/home/qc101/quantum-computing-101/examples          memory: 8G

      - ../outputs:/home/ysha/aicomputing101/quantum-computing-101/outputs

      - qc101-cache-amd:/home/qc101/.cache  # Jupyter development environment (CPU)

      - /dev/kfd:/dev/kfd  jupyter-cpu:

      - /dev/dri:/dev/dri    build:

    ports:      context: ..

      - "8890:8888"  # Jupyter Lab (different port)      dockerfile: docker/Dockerfile.cpu

      - "6008:6006"  # TensorBoard    image: quantum101:cpu

    networks:    container_name: qc101-jupyter-cpu

      - qc101-network    ports:

    devices:      - "8888:8888"

      - /dev/kfd    volumes:

      - /dev/dri      - ../examples:/home/qc101/quantum-computing-101/examples

    group_add:      - ../outputs:/home/qc101/quantum-computing-101/outputs

      - video      - ../modules:/home/qc101/quantum-computing-101/modules:ro

      - render      - jupyter-cpu-workspace:/home/qc101/workspace

    restart: unless-stopped    working_dir: /home/qc101/quantum-computing-101/examples

    stdin_open: true    environment:

    tty: true      - PYTHONPATH=/home/qc101/quantum-computing-101

      - JUPYTER_ENABLE_LAB=yes

# =============================================================================    command: >

# Networks      bash -c "pip install --quiet jupyter jupyterlab ipywidgets &&

# =============================================================================               echo 'Starting Jupyter Lab on http://localhost:8888' &&

networks:               jupyter lab --ip=0.0.0.0 --port=8888 --no-browser 

  qc101-network:               --allow-root --NotebookApp.token='' --NotebookApp.password=''"

    driver: bridge    networks:

    name: qc101-network      - quantum-net

    restart: unless-stopped

# =============================================================================

# Volumes (for persistent cache)  # Jupyter development environment (NVIDIA GPU)

# =============================================================================  jupyter-gpu-nvidia:

volumes:    build:

  qc101-cache:      context: ..

    name: qc101-cache-cpu      dockerfile: docker/Dockerfile.gpu-nvidia

  qc101-cache-nvidia:    image: quantum101:gpu-nvidia

    name: qc101-cache-nvidia    container_name: qc101-jupyter-gpu-nvidia

  qc101-cache-amd:    ports:

    name: qc101-cache-amd      - "8889:8888"

    volumes:
      - ../examples:/home/qc101/quantum-computing-101/examples
      - ../outputs:/home/qc101/quantum-computing-101/outputs
      - ../modules:/home/qc101/quantum-computing-101/modules:ro
      - jupyter-gpu-nvidia-workspace:/home/qc101/workspace
    working_dir: /home/qc101/quantum-computing-101/examples
    environment:
      - PYTHONPATH=/home/qc101/quantum-computing-101
      - JUPYTER_ENABLE_LAB=yes
      - NVIDIA_VISIBLE_DEVICES=all
    command: >
      bash -c "pip install --quiet jupyter jupyterlab ipywidgets &&
               echo 'Starting GPU-accelerated Jupyter Lab on http://localhost:8889' &&
               echo 'CUDA Available:' $(python -c 'import torch; print(torch.cuda.is_available())') &&
               jupyter lab --ip=0.0.0.0 --port=8888 --no-browser 
               --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - quantum-net
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped

  # Jupyter development environment (AMD ROCm GPU)
  jupyter-gpu-amd:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gpu-amd
    image: quantum101:gpu-amd
    container_name: qc101-jupyter-gpu-amd
    ports:
      - "8890:8888"
    volumes:
      - ../examples:/home/qc101/quantum-computing-101/examples
      - ../outputs:/home/qc101/quantum-computing-101/outputs
      - ../modules:/home/qc101/quantum-computing-101/modules:ro
      - jupyter-gpu-amd-workspace:/home/qc101/workspace
    working_dir: /home/qc101/quantum-computing-101/examples
    environment:
      - PYTHONPATH=/home/qc101/quantum-computing-101
      - JUPYTER_ENABLE_LAB=yes
      - ROCm_HOME=/opt/rocm
      - HIP_VISIBLE_DEVICES=all
    command: >
      bash -c "pip install --quiet jupyter jupyterlab ipywidgets &&
               echo 'Starting ROCm-accelerated Jupyter Lab on http://localhost:8890' &&
               echo 'PyTorch ROCm Available:' $(python -c 'import torch; print(torch.cuda.is_available())') &&
               jupyter lab --ip=0.0.0.0 --port=8888 --no-browser 
               --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - quantum-net
    devices:
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    group_add:
      - video
    restart: unless-stopped

  # Development container with all tools (based on NVIDIA GPU)
  quantum101-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gpu-nvidia
    image: quantum101:gpu-nvidia
    container_name: qc101-dev
    volumes:
      - ..:/home/qc101/quantum-computing-101
    working_dir: /home/qc101/quantum-computing-101
    environment:
      - PYTHONPATH=/home/qc101/quantum-computing-101
    networks:
      - quantum-net
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    command: /bin/bash
    stdin_open: true
    tty: true

networks:
  quantum-net:
    driver: bridge
    name: quantum-computing-network

volumes:
  quantum-outputs:
    name: qc101-outputs
    driver: local
  jupyter-cpu-workspace:
    name: qc101-jupyter-cpu-workspace
    driver: local
  jupyter-gpu-nvidia-workspace:
    name: qc101-jupyter-gpu-nvidia-workspace
    driver: local
  jupyter-gpu-amd-workspace:
    name: qc101-jupyter-gpu-amd-workspace
    driver: local